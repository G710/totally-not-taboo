{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","appbar","alignItems","justifyContent","appBar","top","bottom","position","fabButton","zIndex","left","right","margin","App","classes","useState","isFlipped","setisFlipped","remainingTime","setRemainingTime","overlayColor","setOverlayColor","overlayText","setOverlayText","airhorn","Audio","confetti","useRef","undefined","useEffect","intervalId","setInterval","clearInterval","current","rewardMe","AppBar","className","Toolbar","Typography","variant","parseInt","String","padStart","style","width","height","backgroundColor","pointerEvents","textAlign","paddingTop","color","x","y","bounds","onStart","e","console","log","onStop","lastX","onDrag","onClick","marginTop","type","ref","r","config","lifetime","elementCount","elementSize","startVelocity","spread","src","alt","gutterBottom","map","forbidden_word","key","IconButton","edge","aria-label","Fab","size","paused","play","currentTime","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0a707826.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport IconButton from '@material-ui/core/IconButton';\nimport Fab from '@material-ui/core/Fab';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\n\nimport Reward from 'react-rewards'\nimport Draggable from 'react-draggable'; // The default\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  appbar: {\n    alignItems: 'center',\n    justifyContent: 'space-around',\n  },\n  appBar: {\n    top: 'auto',\n    bottom: 0,\n    position: 'fixed'\n  },\n  fabButton: {\n    position: 'absolute',\n    zIndex: 1,\n    top: -30,\n    left: 0,\n    right: 0,\n    margin: '0 auto',\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  const [isFlipped, setisFlipped] = useState(false)\n  const [remainingTime, setRemainingTime] = useState(60) // in seconds\n\n  const [overlayColor, setOverlayColor] = useState('rgba(255, 255, 255, 0.0)')\n  const [overlayText, setOverlayText] = useState('')\n\n  const airhorn = new Audio(\"airhorn.mp3\")\n  const confetti = useRef(undefined)\n\n  useEffect(() => {\n\n    if(!isFlipped)\n      return;\n\n    if (!remainingTime)\n      return;\n\n    const intervalId = setInterval(()=> {\n      setRemainingTime(remainingTime - 1)\n    }, 1000)\n\n    return () => clearInterval(intervalId)\n\n  }, [remainingTime, isFlipped])\n\n  useEffect(() => {\n    confetti.current.rewardMe()\n  }, [])\n\n  function onDragStart(e, position){\n    console.log(e, position)\n  }\n\n  function onDragStop(e, position){\n    console.log(e, position)\n\n    // user is selecting an answer\n    if(position.lastX < -100 || position.lastX > 100){\n      confetti.current.rewardMe()    \n      setisFlipped(false)\n      setRemainingTime(60)\n    }  \n    setOverlayText(\"\")\n    setOverlayColor(`rgba(0,0,0,0)`)\n\n  }\n\n  function onDrag(e, position){\n\n    /**\n     * calculate the new color\n     * \n     * positive x = green\n     * negative x = red\n     */\n\n     if(position.lastX > 0){\n       setOverlayColor(`rgba(45,128,10,${position.lastX / 150 - 0.4})`)\n       setOverlayText(\"SOLVED\")\n     }\n     if(position.lastX < 0){\n      setOverlayColor(`rgba(200,20,20,${position.lastX / -150 - 0.4})`)\n      setOverlayText(\"FAILED\")\n    }\n  }\n\n  return (\n    <div>\n      <AppBar className={classes.appbar} >\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            {parseInt(remainingTime / 60) }:{ String(remainingTime % 60).padStart(2, \"0\")}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n\n      <div style={{\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        backgroundColor: overlayColor,\n        zIndex: 1001,\n        pointerEvents: 'none'\n      }}>\n        <Typography variant=\"h3\" style={{textAlign: 'center', paddingTop: '40vh', color: 'white'}}>\n          {overlayText}\n        </Typography>\n      </div>\n\n      <Draggable\n        position={{x: 0, y: 0}}\n        bounds={{top: -100, left: -200, right: 200, bottom: 0}}\n        onStart={onDragStart}\n        onStop={onDragStop}\n        onDrag={onDrag}\n        >\n        <div \n          onClick={() => setisFlipped(true)} \n          className=\"flip-card center\"\n          style={{marginTop: '10vh'}}\n          >\n            \n          <div className={isFlipped ? \"flip-card-inner-rotated\" : \"flip-card-inner\"}>\n            <div className=\"flip-card-front\">\n            <Reward type=\"confetti\" ref={(r) => confetti.current = r} config={{\n              zIndex: '1000',\n              lifetime: '200',\n              elementCount: '80',\n              elementSize: '15',\n              startVelocity: '15',\n              spread: '90'\n            }}>\n              <div>{/** this div is only here to fulfill the required children prop for Reward */}</div>                \n            </Reward>\n            <img src=\"card-back.jpg\" alt=\"Avatar\" style={{ width: '100%', height: '100%' }} />\n            </div>\n            <div className=\"flip-card-back\">\n              <Typography variant=\"h3\" gutterBottom style={{ paddingTop: '10%' }}>\n                Gew√ºrzgurke\n                </Typography>\n              {\n                ['Essen', 'Oma und Opa', 'Angebot', 'Snack'].map(forbidden_word => {\n                  return (\n                    <Typography key={forbidden_word} variant=\"h5\" style={{ paddingTop: '10%', color: 'lightgray' }}>\n                      {forbidden_word}\n                    </Typography>\n                  )\n                })\n              }\n            </div>\n          </div>\n        </div>\n\n      </Draggable>\n\n      <div className=\"center\">\n        <Typography variant=\"h6\">\n          Click the card to start the timer.\n        </Typography>\n      </div>\n      <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"open drawer\">\n            <MenuIcon />\n          </IconButton>\n          \n          <Fab size=\"large\" color=\"secondary\" aria-label=\"add\" className={classes.fabButton} onClick={() => {\n            if (airhorn.paused) {\n              airhorn.play()\n            } else {\n              airhorn.currentTime = 0\n            }\n          }}>\n            <VolumeUpIcon />\n          </Fab>\n        </Toolbar>\n      </AppBar>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}