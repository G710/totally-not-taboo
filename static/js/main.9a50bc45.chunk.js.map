{"version":3,"sources":["components/Card.js","_cards.js","App.js","serviceWorker.js","index.js"],"names":["Card","item","isFlipped","onCardMoved","onCardSwiped","startGame","position","x","y","bounds","top","left","right","bottom","onStart","e","console","log","onStop","lastX","onDrag","onClick","className","style","marginTop","src","alt","width","height","Typography","variant","gutterBottom","paddingTop","forbidden_words","map","forbidden_word","key","color","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","appbar","alignItems","justifyContent","appBar","backgroundColor","fabButton","zIndex","margin","App","classes","useState","currentCard","setCurrentCard","gameRunning","setGameRunning","remainingTime","setRemainingTime","overlayColor","setOverlayColor","overlayText","setOverlayText","topAppbarBackgroundColor","setTopAppbarBackgroundColor","cards","items","setItems","airhorn","Audio","confetti","useRef","undefined","drawNewCard","tItems","filter","length","newCard","Math","floor","random","playAirhorn","paused","play","currentTime","useEffect","intervalId","setInterval","clearInterval","current","rewardMe","AppBar","Toolbar","parseInt","String","padStart","pointerEvents","textAlign","type","ref","r","config","angle","lifetime","elementCount","elementSize","startVelocity","spread","swipeFinished","xPosition","IconButton","edge","aria-label","Fab","size","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4VAKe,SAASA,EAAT,GAA0E,IAA1DC,EAAyD,EAAzDA,KAAMC,EAAmD,EAAnDA,UAAWC,EAAwC,EAAxCA,YAAaC,EAA2B,EAA3BA,aAAcC,EAAa,EAAbA,UA2BvE,OACI,kBAAC,IAAD,CACIC,SAAU,CAAEC,EAAG,EAAGC,EAAG,GACrBC,OAAQ,CAAEC,KAAM,IAAKC,MAAO,IAAKC,MAAO,IAAKC,OAAQ,GACrDC,QAxBR,SAAqBC,EAAGT,GACpBU,QAAQC,IAAIF,EAAGT,IAwBXY,OArBR,SAAoBH,EAAGT,GACnBU,QAAQC,IAAIF,EAAGT,GAGXA,EAASa,OAAS,KAAOb,EAASa,MAAQ,IAC1Cf,GAAa,GAEbA,GAAa,IAebgB,OAXR,SAAgBL,EAAGT,GAEfH,EAAYG,EAASa,SAWjB,yBACIE,QAAS,kBAAMhB,KACfiB,UAAU,mBACVC,MAAO,CAAEC,UAAW,SAGpB,yBAAKF,UAAWpB,EAAY,0BAA4B,mBACpD,yBAAKoB,UAAU,mBAEX,yBAAKG,IAAI,gBAAgBC,IAAI,SAASH,MAAO,CAAEI,MAAO,OAAQC,OAAQ,WAE1E,yBAAKN,UAAU,kBACX,kBAACO,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,EAACR,MAAO,CAAES,WAAY,QACtD/B,EAAKA,MAGNA,EAAKgC,gBAAgBC,KAAI,SAAAC,GACrB,OACI,kBAACN,EAAA,EAAD,CAAYO,IAAKD,EAAgBL,QAAQ,KAAKP,MAAO,CAAES,WAAY,MAAOK,MAAO,cAC5EF,UC3D1B,OACX,CACIlC,KAAM,eACNgC,gBAAiB,CAAC,QAAS,cAAe,UAAW,UAEzD,CACIhC,KAAM,YACNgC,gBAAiB,CAAC,QAAS,OAAQ,QAAS,gBCQ9CK,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,GAEZK,OAAQ,CACNC,WAAY,SACZC,eAAgB,gBAElBC,OAAQ,CACNxC,IAAK,OACLG,OAAQ,EACRP,SAAU,QACV6C,gBAAiB,WAEnBC,UAAW,CACT9C,SAAU,WACV+C,OAAQ,EACR3C,KAAM,GACNC,KAAM,EACNC,MAAO,EACP0C,OAAQ,cAoLGC,MAhLf,WACE,IAAMC,EAAUlB,IADH,EAGyBmB,mBAAS,CAACxD,KAAM,GAAIgC,gBAAiB,KAH9D,mBAGNyB,EAHM,KAGOC,EAHP,OAKyBF,oBAAS,GALlC,mBAKNG,EALM,KAKOC,EALP,OAM6BJ,mBAAS,IANtC,mBAMNK,EANM,KAMSC,EANT,OAQ2BN,mBAAS,4BARpC,mBAQNO,EARM,KAQQC,EARR,OASyBR,mBAAS,IATlC,mBASNS,EATM,KASOC,EATP,OAWmDV,mBAAS,WAX5D,mBAWNW,EAXM,KAWoBC,EAXpB,OAaaZ,mBAASa,GAbtB,mBAaNC,EAbM,KAaCC,EAbD,KAePC,EAAU,IAAIC,MAAM,eAEpBC,EAAWC,sBAAOC,GAoCxB,SAASC,IAGP,IAAIC,EAASR,EAAMS,QAAO,SAAA/E,GAAI,QAAMA,EAAKA,OAASyD,EAAYzD,SAGzC,IAAlB8E,EAAOE,SACRF,EAAST,GAGX,IAAMY,EAAUH,EAAOI,KAAKC,MAAMD,KAAKE,SAAWN,EAAOE,SACzDtB,EAAeuB,GACfV,EAASO,GAgBX,SAASO,IACHb,EAAQc,OACVd,EAAQe,OAERf,EAAQgB,YAAc,EAwB1B,OAzFAC,qBAAU,WAER,GAAK9B,EAAL,CAGA,GAAKE,EAAL,CAIA,IAAM6B,EAAaC,aAAY,WAC7B7B,EAAiBD,EAAgB,KAEhC,KAQH,OALEO,EADCP,EAAgB,GACW,UAEA,WAGvB,kBAAM+B,cAAcF,IAdzBL,OAgBD,CAACxB,EAAeF,IAGnB8B,qBAAU,WACRf,EAASmB,QAAQC,WACjBjB,MACC,IA8DD,6BACE,kBAACkB,EAAA,EAAD,CAAQ1E,UAAWkC,EAAQT,OAAQxB,MAAO,CAAC4B,gBAAiBiB,IAC1D,kBAAC6B,EAAA,EAAD,KACE,kBAACpE,EAAA,EAAD,CAAYC,QAAQ,KAAKR,UAAWkC,EAAQV,OACzCoD,SAASpC,EAAgB,IAD5B,IACkCqC,OAAOrC,EAAgB,IAAIsC,SAAS,EAAG,QAM7E,yBAAK7E,MAAO,CACVjB,SAAU,WACVI,IAAK,EACLC,KAAM,EACNgB,MAAO,OACPC,OAAQ,OACRuB,gBAAiBa,EACjBX,OAAQ,KACRgD,cAAe,SAEf,kBAACxE,EAAA,EAAD,CAAYC,QAAQ,KAAKP,MAAO,CAAE+E,UAAW,SAAUtE,WAAY,OAAQK,MAAO,UAC/E6B,IAIL,kBAAC,IAAD,CAAQqC,KAAK,WAAWC,IAAK,SAACC,GAAD,OAAO9B,EAASmB,QAAUW,GAAGC,OAAQ,CAChEC,MAAO,IACPtD,OAAQ,OACRuD,SAAU,MACVC,aAAc,KACdC,YAAa,KACbC,cAAe,KACfC,OAAQ,OAER,kBAAChH,EAAD,CACEC,KAAMyD,EACNxD,UAAW0D,EACXxD,aA7ER,SAAsB6G,GAChBA,IACFtC,EAASmB,QAAQC,WACjBlC,GAAe,GACfE,EAAiB,IACjBe,KAEFX,EAAe,IACfF,EAAgB,kBAsEV9D,YA1DR,SAAqB+G,GAQfA,EAAY,IACdjD,EAAgB,kBAAD,OAAmBiD,EAAY,IAAM,GAArC,MACf/C,EAAe,WAEb+C,EAAY,IACdjD,EAAgB,kBAAD,OAAmBiD,GAAa,IAAM,GAAtC,MACf/C,EAAe,YA6CX9D,UAAW,kBAAMwD,GAAe,OAIpC,yBAAKvC,UAAU,UACb,kBAACO,EAAA,EAAD,CAAYC,QAAQ,MAApB,uCAIF,kBAACkE,EAAA,EAAD,CAAQ1F,SAAS,QAAQ+B,MAAM,UAAUf,UAAWkC,EAAQN,QAC1D,kBAAC+C,EAAA,EAAD,KACE,kBAACkB,EAAA,EAAD,CAAYC,KAAK,QAAQ/E,MAAM,UAAUgF,aAAW,eAClD,kBAAC,IAAD,OAGF,kBAACC,EAAA,EAAD,CAAKC,KAAK,QAAQlF,MAAM,YAAYgF,aAAW,MAAM/F,UAAWkC,EAAQJ,UAAW/B,QAAS,WAC1FiE,MAEA,kBAAC,IAAD,WCxMQkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9a50bc45.chunk.js","sourcesContent":["import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Draggable from 'react-draggable'; // The default\n\n\nexport default function Card({ item, isFlipped, onCardMoved, onCardSwiped, startGame }) {\n\n    /**\n     * \n     * Events from Draggable interface\n     * \n     */\n    function onDragStart(e, position) {\n        console.log(e, position)\n    }\n\n    function onDragStop(e, position) {\n        console.log(e, position)\n\n        // user is selecting an answer\n        if (position.lastX < -100 || position.lastX > 100) {\n            onCardSwiped(true) // swipe successful\n        } else {\n            onCardSwiped(false) // swipe not finished\n        }\n    }\n\n    function onDrag(e, position) {\n\n        onCardMoved(position.lastX)\n    }\n\n    return (\n        <Draggable\n            position={{ x: 0, y: 0 }}\n            bounds={{ top: -100, left: -200, right: 200, bottom: 0 }}\n            onStart={onDragStart}\n            onStop={onDragStop}\n            onDrag={onDrag}\n        >\n            <div\n                onClick={() => startGame()}\n                className=\"flip-card center\"\n                style={{ marginTop: '10vh' }}\n            >\n\n                <div className={isFlipped ? \"flip-card-inner-rotated\" : \"flip-card-inner\"}>\n                    <div className=\"flip-card-front\">\n\n                        <img src=\"card-back.jpg\" alt=\"Avatar\" style={{ width: '100%', height: '100%' }} />\n                    </div>\n                    <div className=\"flip-card-back\">\n                        <Typography variant=\"h4\" gutterBottom style={{ paddingTop: '10%' }}>\n                            {item.item}\n                        </Typography>\n                        {\n                            item.forbidden_words.map(forbidden_word => {\n                                return (\n                                    <Typography key={forbidden_word} variant=\"h5\" style={{ paddingTop: '10%', color: 'lightgray' }}>\n                                        {forbidden_word}\n                                    </Typography>\n                                )\n                            })\n                        }\n                    </div>\n                </div>\n            </div>\n\n        </Draggable>\n    )\n}","export default [\n    {\n        item: \"Gewuerzgurke\",\n        forbidden_words: ['Essen', 'Oma und Opa', 'Angebot', 'Snack'] // max 6\n    },\n    {\n        item: \"Eifelturm\",\n        forbidden_words: ['Paris', 'Hoch', 'Messe', 'Romantisch'] // max 6\n    },\n]","import React, { useState, useEffect, useRef } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport IconButton from '@material-ui/core/IconButton';\nimport Fab from '@material-ui/core/Fab';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\n\nimport Reward from 'react-rewards'\nimport Card from './components/Card';\n\nimport cards from './_cards'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  appbar: {\n    alignItems: 'center',\n    justifyContent: 'space-around',\n  },\n  appBar: {\n    top: 'auto',\n    bottom: 0,\n    position: 'fixed',\n    backgroundColor: '#01579b'\n  },\n  fabButton: {\n    position: 'absolute',\n    zIndex: 1,\n    top: -30,\n    left: 0,\n    right: 0,\n    margin: '0 auto',\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  const [currentCard, setCurrentCard] = useState({item: '', forbidden_words: []})\n\n  const [gameRunning, setGameRunning] = useState(false)\n  const [remainingTime, setRemainingTime] = useState(60) // in seconds\n\n  const [overlayColor, setOverlayColor] = useState('rgba(255, 255, 255, 0.0)')\n  const [overlayText, setOverlayText] = useState('')\n\n  const [topAppbarBackgroundColor, setTopAppbarBackgroundColor] = useState('#01579b')\n\n  const [items, setItems] = useState(cards)\n\n  const airhorn = new Audio(\"airhorn.mp3\")\n\n  const confetti = useRef(undefined)\n\n  // update game timer\n  useEffect(() => {\n\n    if (!gameRunning)\n      return;\n\n    if (!remainingTime){\n      playAirhorn()\n      return;\n    }\n    const intervalId = setInterval(() => {\n      setRemainingTime(remainingTime - 1)\n      \n    }, 1000)\n\n    if(remainingTime < 10){\n      setTopAppbarBackgroundColor('#d84315')\n    }else{\n      setTopAppbarBackgroundColor('#01579b')\n    }\n\n    return () => clearInterval(intervalId)\n\n  }, [remainingTime, gameRunning])\n\n  // initial startup\n  useEffect(() => {\n    confetti.current.rewardMe()\n    drawNewCard()\n  }, [])\n\n  // get random item from array of items\n  // remove cards from deck after showing them to seem more random.\n  // start new after all cards have been shown.\n  function drawNewCard(){\n\n    // remove current item\n    let tItems = items.filter(item => !(item.item === currentCard.item))\n\n    // if no more items -> reimport all items\n    if(tItems.length === 0){\n      tItems = cards\n    }\n\n    const newCard = tItems[Math.floor(Math.random() * tItems.length)]\n    setCurrentCard(newCard)\n    setItems(tItems)\n\n  }\n\n  // reset game if card is swiped to left or right\n  function onCardSwiped(swipeFinished) {\n    if (swipeFinished) {\n      confetti.current.rewardMe()\n      setGameRunning(false)\n      setRemainingTime(60)\n      drawNewCard()\n    }\n    setOverlayText(\"\")\n    setOverlayColor(`rgba(0,0,0,0)`)\n  }\n\n  function playAirhorn(){\n    if (airhorn.paused) {\n      airhorn.play()\n    } else {\n      airhorn.currentTime = 0\n    }\n  }\n\n  // update overlay during swipe\n  function onCardMoved(xPosition) {\n\n    /**\n     * calculate the new color\n     * \n     * positive x = green\n     * negative x = red\n     */\n    if (xPosition > 0) {\n      setOverlayColor(`rgba(45,128,10,${xPosition / 150 - 0.4})`)\n      setOverlayText(\"SOLVED\")\n    }\n    if (xPosition < 0) {\n      setOverlayColor(`rgba(200,20,20,${xPosition / -150 - 0.4})`)\n      setOverlayText(\"FAILED\")\n    }\n  }\n\n\n  return (\n    <div>\n      <AppBar className={classes.appbar} style={{backgroundColor: topAppbarBackgroundColor}} >\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            {parseInt(remainingTime / 60)}:{String(remainingTime % 60).padStart(2, \"0\")}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n\n      <div style={{\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        backgroundColor: overlayColor,\n        zIndex: 1001,\n        pointerEvents: 'none'\n      }}>\n        <Typography variant=\"h3\" style={{ textAlign: 'center', paddingTop: '40vh', color: 'white' }}>\n          {overlayText}\n        </Typography>\n      </div>\n\n      <Reward type=\"confetti\" ref={(r) => confetti.current = r} config={{\n        angle: \"0\",\n        zIndex: '1000',\n        lifetime: '200',\n        elementCount: '80',\n        elementSize: '15',\n        startVelocity: '20',\n        spread: '90'\n      }}>\n        <Card\n          item={currentCard}\n          isFlipped={gameRunning}\n          onCardSwiped={onCardSwiped}\n          onCardMoved={onCardMoved}\n          startGame={() => setGameRunning(true)} />\n      </Reward>\n\n\n      <div className=\"center\">\n        <Typography variant=\"h6\">\n          Click the card to start the timer.\n        </Typography>\n      </div>\n      <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"open drawer\">\n            <MenuIcon />\n          </IconButton>\n\n          <Fab size=\"large\" color=\"secondary\" aria-label=\"add\" className={classes.fabButton} onClick={() => {\n            playAirhorn();\n          }}>\n            <VolumeUpIcon />\n          </Fab>\n        </Toolbar>\n      </AppBar>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}